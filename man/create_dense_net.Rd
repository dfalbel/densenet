% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/densenet2.R
\name{create_dense_net}
\alias{create_dense_net}
\title{Build the DenseNet model}
\usage{
create_dense_net(nb_classes, img_input, include_top, depth = 40,
  nb_dense_block = 3, growth_rate = 12, nb_filter = -1,
  nb_layers_per_block = -1, bottleneck = FALSE, reduction = 0,
  dropout_rate = NULL, weight_decay = 1e-04, activation = "softmax")
}
\arguments{
\item{nb_classes:}{number of classes}

\item{img_input:}{tuple of shape (channels, rows, columns) or (rows, columns, channels)}

\item{include_top:}{flag to include the final Dense layer}

\item{nb_dense_block:}{number of dense blocks to add to end (generally = 3)}

\item{growth_rate:}{number of filters to add per dense block}

\item{reduction:}{reduction factor of transition blocks. Note : reduction value is inverted to compute compression}

\item{dropout_rate:}{dropout rate}

\item{weight_decay:}{weight decay}

\item{nb_layers_per_block:}{number of layers in each dense block.
Can be a positive integer or a list.
If positive integer, a set number of layers per dense block.
If list, nb_layer is used as provided. Note that list size must
be (nb_dense_block + 1)}

\item{nb_upsampling_conv:}{number of convolutional layers in upsampling via subpixel convolution}

\item{upsampling_type:}{Can be one of 'upsampling', 'deconv' and 'subpixel'. Defines
type of upsampling algorithm used.}

\item{input_shape:}{Only used for shape inference in fully convolutional networks.}

\item{activation:}{Type of activation at the top layer. Can be one of 'softmax' or 'sigmoid'.
Note that if sigmoid is used, classes must be 1.}
}
\description{
Build the DenseNet model
}
